generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String?
  image     String?
  salt      String?
  createdAt DateTime @default(now())
  emailVerified DateTime?

  accounts   Account[]
  posts      Post[]
  comments   Comment[]
  likes      Like[]
  notifications Notification[]
  searches   Search[]
  follows    Follow[] @relation("Following")
  followers  Follow[] @relation("Followers")
  messages   Message[]
  chatUsers  ChatUser[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id         Int      @id @default(autoincrement())
  createdBy  String
  photo      String
  text       String?  @db.VarChar(250)
  postedDate DateTime @default(now())

  user       User     @relation(fields: [createdBy], references: [id])
  comments   Comment[]
  likes      Like[]
}

model Comment {
  id          Int      @id @default(autoincrement())
  text        String
  createdBy   String
  postId      Int
  respondingTo Int?
  postedDate  DateTime @default(now())

  user        User    @relation(fields: [createdBy], references: [id])
  post        Post    @relation(fields: [postId], references: [id])
}

model Like {
  postId  Int
  userId  String

  post    Post @relation(fields: [postId], references: [id])
  user    User @relation(fields: [userId], references: [id])

  @@id([postId, userId])
}

model Notification {
  id              Int       @id @default(autoincrement())
  userId          String
  notificationType String
  readDate        DateTime?
  followUserId    String?
  commentPostId   Int?
  likePostId      Int?
  notificationDate DateTime @default(now())

  user            User @relation(fields: [userId], references: [id])
}

model Follow {
  userId     String
  followerId String
  followDate DateTime @default(now())

  user       User @relation("Following", fields: [userId], references: [id])
  follower   User @relation("Followers", fields: [followerId], references: [id])

  @@id([userId, followerId])
}

model Search {
  userId         String
  searchedUserId String
  searchDate     DateTime @default(now())

  user           User @relation(fields: [userId], references: [id])

  @@id([userId, searchedUserId])
}

model Chat {
  id   Int    @id @default(autoincrement())
  name String
  messages Message[]
  chatUsers ChatUser[]
}

model ChatUser {
  chatId Int
  userId String

  chat Chat @relation(fields: [chatId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@id([chatId, userId])
}

model Message {
  id        Int      @id @default(autoincrement())
  senderId  String
  chatId    Int
  content   String
  dateSent  DateTime @default(now())

  sender    User @relation(fields: [senderId], references: [id])
  chat      Chat @relation(fields: [chatId], references: [id])
}

model VerificationToken {
  id        Int @id @default(autoincrement())
  email     String
  token     String
  expires   DateTime

  @@unique([email, token])
}
